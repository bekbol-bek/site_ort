let currentQuestionIndex = 0; // Индекс текущего вопроса
let userAnswers = []; // Массив для хранения ответов пользователя
let questionTimeLimit = 20; // Время на один вопрос (в секундах)
let questionTimer; // Таймер для текущего вопроса
let startTime = Date.now(); // Инициализация времени начала теста

let questions = [
    {
        question: "1. Табигый ресурстарды $$$$ колдонуу, жаратылышка $$$$ зыян келтирүүдө жана экосистеманы $$$$.",
        options: ["а) үнөмдүү / оң / сактап калат", "б) ашыкча / терс / бузат", "в) туура / калыс / жакшыртат", "г) жөнгө салынган / пайдалуу / бекемдейт"],
        answer: "б) ашыкча / терс / бузат"
    },
    {
        question: "2. Адамдардын $$$$ көбөйүшү, шаардын $$$$ өсүшү жана экологиялык $$$$ пайда болууда.",
        options: ["а) санынын / инфраструктуранын / көйгөйлөр", "б) жашоосунун / турмуштун / өзгөрүүлөр", "в) ден соолугунун / маданиятынын / жогорулашы", "г) билим деңгээлинин / деңгээлинин / оң жактары"],
        answer: "а) санынын / инфраструктуранын / көйгөйлөр"
    },
    {
        question: "3. Климаттын $$$$ өзгөрүүсү, табияттагы $$$$ жоголушу жана айыл чарбасына $$$$ таасир этүүдө.",
        options: ["а) жакшыруусу / баалуулуктардын / оң", "б) турукташуу / жашыл аймактардын / терс", "в) туруксуздугу / биологиялык түрлөрдүн / терс", "г) ыңгайлуулугу / суунун / оң"],
        answer: "в) туруксуздугу / биологиялык түрлөрдүн / терс"
    },
    {
        question: "4. “Манас” эпосунун каармандарынын күч-кубаты $$$$ көрүнөт: Манастын $$$$ жана Каныкейдин $$$$.",
        options: ["а) идеялуулугунда / батылдыгы / айкөлдүгү", "б) эрдигинде / күрөшү / акылмандыгы", "в) даңктуулугунда / кайраттуулугу / сулуулугу", "г) чыдамдуулугунда / эр жүрөктүүлүгү / караңгылыгы"],
        answer: "б) эрдигинде / күрөшү / акылмандыгы" 
    },
    {
        question: "5. “Делбирим” чыгармасындагы сүйүү темасы $$$$ негизделет: каармандардын $$$$ жана кырдаалдардын $$$$.",
        options: ["а) чыныгы сезимдерге / ак ниети / чыр-чатактуулугу", "б) кайгылуу окуяларга / аракети / татаалдыгы", "в) романтикалуу маанайга / жакындыгы / жөнөкөйлүгү", "г) турмуштук чындыктарга / ишеними / драмалуулугу"],
        answer: "г) турмуштук чындыктарга / ишеними / драмалуулугу" 
    },
    {
        question: "6.  __, ___ карап туруп, __ баамдоо кыйын.",
        options: ["а) китепти / сүрөттөргө / окуянын тереңдигин", "б) асманды / жылдыздарга / планеталарды", "в) адамды / жүзүнө / анын оюн", "г) дарыяны / шар аккан сууга / агымынын күчүн"],
        answer: "в) адамды / жүзүнө / анын оюн" 
    },
    {
        question: "7.  __, __ күтүлбөгөн жерден __ алып келди.",
        options: ["а) кечинде / талаадан / шамалдуу аба ырайын", "б) жазында / тоолордон / чоң кар жаашын", "в) жайында / деңизден / тынчтыкты", "г) таң атканда / шаардан / чоң окуяларды"],
        answer: "а) кечинде / талаадан / шамалдуу аба ырайын" 
    },
    {
        question: "8.  __, ___ өзгөчө __ менен таасир калтырды.",
        options: ["а) чыгармалар / каармандарынын / каалоолору", "б) айылдыктар / салттуу / майрамдаган", "в) поэма / ыр саптарынын / тереңдиги", "г) көркөм тасма / баш каармандын / аракеттери"],
        answer: " в) поэма / ыр саптарынын / тереңдиги" 
    },
    {
        question: "9.  __, __ күтүлбөгөн __ башталды. ",
        options: ["а) кечинде / асманда / жамгыр", "б) жайында / талаада / бороон", "в) күзүндө / тоолордо / муздактын эрүүсү", "г) эртең менен / шаарда / митинг"],
        answer: "а) кечинде / асманда / жамгыр"
    },
    {
    
        question: "10.  __, ___ арасында __ болбошу керек.",
        options: ["а) достор / бири-биринин / ишенбөөчүлүк", "б) элдер / кошунанын / араздашуулар", "в) үй-бүлө / балдардын / түшүнбөстүктөр", "г) жетекчи / кызматкерлердин / мамиле бузулушу"],
        answer: "а) достор / бири-биринин / ишенбөөчүлүк"
    },
    {
        question: "11.  __, __ улам жаңы __ пайда болду.",
        options: ["а) согуш / оор күндөрдүн / ишеним", "б) шаарда / көчөлөрдө / курулуштар", "в) жазында / бактарда / жалбырактар", "г) чыгармалар / жаңы каармандар / ойлор"],
        answer: "б) шаарда / көчөлөрдө / курулуштар"
    },
    {
        question: "12.  __, __ эч качан __ мүмкүн эмес.",
        options: ["а) адабиятта / классикалык чыгармалар / баа бербей коюу", "б) тарыхта / чоң окуялар / эскерилбей калуу", "в) окуу процессинде / билим алуу / татаал болуп калуу", "г) заманда / эски идеялар / унутулуп калуу"],
        answer: "а) адабиятта / классикалык чыгармалар / баа бербей коюу"
    },
    {
        question: "13.  __, __ тажрыйба __ мүмкүнчүлүк берет.",
        options: ["а) айылда / жаштардын / көпкө жашоого", "б) мектепте / мугалимдердин / жакшы окууга", "в) турмушта / кыйынчылыктар / сабак алууга", "г) турмушта / кыйынчылыктар / сабак алууга"],
        answer: "г) турмушта / кыйынчылыктар / сабак алууга"
    },
    {
        question: "14.  __, __ күтүлбөгөн жерден __ себеп болду.",
        options: ["а) табигый кырсык / катуу шамалдын / бактардын жыгылышына", "б) согуш / башаламандык / элдин ынтымагына", "в) кечки тамак / ашпозчунун / даамдуу тамактын жасалышына", "г) жазгы жаан / суу ташкындын / талаалардын жабыркашына"],
        answer: "а) табигый кырсык / катуу шамалдын / бактардын жыгылышына"
    },
    {
        question: "15. 2. __, __ жыйынтыгы __ алып келди.",
        options: ["а) жайкы эс алуу / жаратылыштын / аба-ырайынын бузулушуна", "б) уруш / эки мамлекеттин / ынтымакка", "в) жаратылыш кырсыгы / дарыгерлердин / оорулуулардын сакайышына", "г) изилдөө / окумуштуулардын / жаңы ачылыштарга"],
        answer: "г) изилдөө / окумуштуулардын / жаңы ачылыштарга"
    },
    {
        question: "16.  __, __ негизги себептери __ байланыштуу.",
        options: ["а) окуялардын өнүгүшү / каармандардын өзгөрүшү / чыгарманын идеясы менен", "б) айлана-чөйрөнүн булганышы / өсүмдүктөрдүн жок болушу / климаттык өзгөрүүлөр менен", "в) айылдык жашоо / мал чарбачылыгы / элдин турмушу менен", "г) шаардык турмуш / тез өзгөрүүлөр / убакыттын жетишсиздиги менен"],
        answer: "б) айлана-чөйрөнүн булганышы / өсүмдүктөрдүн жок болушу / климаттык өзгөрүүлөр менен"
    },
    {
        question: "17.  __, __ таасиринен __ өзгөрүшү мүмкүн.",
        options: ["а) иш-чаралар / жаңы долбоорлордун / коомдун", "б) аба ырайы / катуу шамалдын / климаттын", "в) билим берүү / жаңы реформалардын / окуу системасынын", "г) туризм / экономиканын өсүшүнүн / маданияттын"],
        answer: "в) билим берүү / жаңы реформалардын / окуу системасынын"
    },
    {
        question: "18.  __, __ таасирдүү __ элдин эсинде калды. ",
        options: ["а) согуш / баатырлардын эрдиктери / окуя", "б) тойлор / элдик ырлар / салт", "в) концерт / популярдуу ырлардын / образ", "г) чыгармалар / каармандардын терс жактары / мисал"],
        answer: "а) согуш / баатырлардын эрдиктери / окуя"
    },
    {
        question: "19.  __, __ жаңы __ ачылыштарга түрткү берди.",
        options: ["а) билим берүү / окутуучулардын сабактары / ойлорго", "б) саякаттар / саякатчылардын окуялары / фактыларга", "в) илимий изилдөөлөр / окумуштуулардын аракеттери / ачылыштарга", "г) спорттук мелдештер / катышуучулардын жеңиши / мүмкүнчүлүктөргө"],
        answer: "в) илимий изилдөөлөр / окумуштуулардын аракеттери / ачылыштарга"
    },
    {
        question: "20.  __, __ чоң окуянын __ себеп болду.",
        options: ["а) табигый кырсык / жер титирөөнүн / кыйроолоруна", "б) шаардык турмуш / тез өзгөрүүлөрдүн / жыйынтыктарга", "в) тарыхый окуя / согуштун / элдин ынтымагына", "г) илимий ачылыш / жаңы технологиялардын / өнүгүшүнө"],
        answer: "а) табигый кырсык / жер титирөөнүн / кыйроолоруна"
    },
];

// Таймер для одного вопроса
function startQuestionTimer() {
    let timeLeft = questionTimeLimit;
    document.getElementById('timer').innerText = `Время на текущий вопрос: ${timeLeft}секунд`;

    questionTimer = setInterval(() => {
        timeLeft--;

        if (timeLeft <= 0) {
            clearInterval(questionTimer);
            alert('Время на вопрос истекло! Переходим к следующему.');
            userAnswers.push(null); // Добавляем "Нет ответа"
            moveToNextQuestion(); // Переходим к следующему вопросу
        } else {
            document.getElementById('timer').innerText = `Время на текущий вопрос: ${timeLeft}секунд`;
        }
    }, 1000);
}

// Переход к следующему вопросу
function moveToNextQuestion() {
    currentQuestionIndex++;

    if (currentQuestionIndex < questions.length) {
        showQuestion();
    } else {
        showResults(); // Завершаем тест
    }
}

// Отображение текущего вопроса
function showQuestion() {
    clearInterval(questionTimer); // Очищаем предыдущий таймер
    let currentQuestion = questions[currentQuestionIndex];
    let questionSection = document.getElementById('questionSection');
    let cleanedQuestionText = currentQuestion.question.replace(/\$\$\$\$/g, '_____');

    questionSection.innerHTML = `
        <h3>${cleanedQuestionText}</h3>
        <form id="questionForm">
            ${currentQuestion.options.map((option) => `
                <label>
                    <input type="radio" name="answer" value="${option}">
                    ${option}
                </label><br>
            `).join('')}
        </form>
    `;

    // Запускаем таймер на текущий вопрос
    startQuestionTimer();

    document.getElementById('nextQuestionBtn').style.display = 'inline-block';
}

// Обработка кнопки "Следующий вопрос"
document.getElementById('nextQuestionBtn').addEventListener('click', function () {
    let selectedAnswer = document.querySelector('input[name="answer"]:checked')?.value;

    if (selectedAnswer) {
        userAnswers.push(selectedAnswer); // Сохраняем выбранный ответ
        moveToNextQuestion();
    } else {
        alert('Пожалуйста, выберите ответ или дождитесь завершения времени!');
    }
});

// Завершение теста
function showResults() {
    clearInterval(questionTimer); // Останавливаем последний таймер

    let resultsList = document.getElementById('resultsList');
    resultsList.innerHTML = '';
    let score = 0;

    questions.forEach((question, index) => {
        let cleanedQuestionText = question.question.replace(/\$\$\$\$/g, '_____');
        let userAnswer = userAnswers[index];
        let isCorrect = userAnswer === question.answer;
        let resultIcon = isCorrect ? '✓' : '✗';
        let resultColor = isCorrect ? 'green' : 'red';

        resultsList.innerHTML += `
            <p><strong>Вопрос ${index + 1}:</strong> ${cleanedQuestionText}</p>
            <p>Ваш ответ: <span>${userAnswer || 'Нет ответа'}</span></p>
            <p>Правильный ответ: <span>${question.answer}</span></p>
            <p>
                <span style="color: ${resultColor}; font-weight: bold;">${resultIcon}</span> 
                ${isCorrect ? 'Правильно' : 'Неправильно'}
            </p>
            <hr>
        `;

        if (isCorrect) {
            score++;
        }
    });

    let percentage = (score / questions.length) * 100;
    let grade = percentage >= 90 ? '5' : percentage >= 70 ? '4' : percentage >= 50 ? '3' : '2';

    resultsList.innerHTML += `<h4>Ваш результат: ${score} из ${questions.length} (${percentage.toFixed(2)}%)</h4>`;
    resultsList.innerHTML += `<p>Ваша оценка: <strong>${grade}</strong></p>`;

    // Вывод времени, затраченного на тест
    let elapsedTime = Math.floor((Date.now() - startTime) / 1000);
    let minutes = Math.floor(elapsedTime / 60);
    let seconds = elapsedTime % 60;
    resultsList.innerHTML += `<p>Время, затраченное на тест: ${minutes}:${seconds < 10 ? '0' + seconds : seconds}</p>`;

    // Переход к блоку с результатами
    document.getElementById('testSection').style.display = 'none';
    document.getElementById('resultsSection').style.display = 'block';
}

// Старт теста
    document.getElementById('startTestBtn').addEventListener('click', function () {
    document.getElementById('intro').style.display = 'none';
    document.getElementById('testSection').style.display = 'block';
    showQuestion(); // Показываем первый вопрос
});
document.getElementById('restartTestBtn').addEventListener('click', function () {
    // Сброс переменных
    currentQuestionIndex = 0;
    userAnswers = [];
    startTime = Date.now(); // Сброс времени начала

    // Скрыть результаты и показать тест
    document.getElementById('resultsSection').style.display = 'none';
    document.getElementById('testSection').style.display = 'block';

    // Показать первый вопрос
    showQuestion();
});
